{"version":3,"sources":["components/Loader/index.js","components/Main/Title/index.js","components/Main/Table/TableBody/TableRow/TableCell/CellRenderer/TextCell.js","Columns.js","components/Main/Table/TableBody/TableRow/TableCell/CellRenderer/PasswordCell.js","components/Button/index.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/AvailableColumns/AvailableSearch/index.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/DnD-types.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/ListItemRenderer/AvailableItem.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/AvailableColumns/index.js","components/CrossButton/index.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/ListItemRenderer/SelectedItem.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/SelectedColumns/index.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/Apply/index.js","redux/actions.js","redux/types.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/ListWrapper/index.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/ColumnTitle/index.js","components/Main/Header/ColumnsSelectionModal/ColumnsSelection/index.js","components/Main/Header/ColumnsSelectionModal/index.js","components/Main/Header/index.js","components/Main/Table/TableHeader/index.js","components/Main/Table/TableBody/TableRow/TableCell/index.js","components/Main/Table/TableBody/TableRow/index.js","components/Main/Table/TableBody/index.js","components/Main/Table/index.js","components/Main/index.js","App.js","serviceWorker.js","redux/reducers/tableReducer.js","redux/reducers/columnsReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Loader","id","className","Title","title","TextCell","value","COLUMNS","name","renderer","key","style","color","backgroundColor","display","Button","buttonClickHandler","buttonText","classes","onClick","AvailableSearch","setSearchableValue","type","onChange","event","target","trim","placeholder","ItemTypes","AvailableItem","columnId","useDrag","item","collect","monitor","isDragging","dragRef","opacity","ref","AvailableColumns","columns","selectedIds","availableColumns","useMemo","filter","column","includes","sort","a","b","useState","searchableValue","filteredList","toLowerCase","availableColumnsList","map","CrossButton","SelectedItem","removeSelectedItemClickHandler","SelectedColumns","setSelectedIds","useDrop","accept","drop","newSelectedIds","concat","dropRef","selectedColumns","find","selectedColumnsList","Apply","dispatch","useDispatch","payload","ListWrapper","props","children","ColumnTitle","ColumnsSelection","selectedColumnsId","useSelector","state","selectedColumnsIdModal","setSelectedColumnsIdModal","DndProvider","backend","TouchBackend","HTML5Backend","ColumnsSelectionModal","Header","isShowingColumnsSelectionModal","isShowColumnsSelection","TableHeader","headers","TableCell","itemData","Renderer","TableRow","rowCells","TableBody","tableRows","table","data","Table","Main","Fragment","length","fontSize","App","isLoading","loader","useEffect","fetch","method","then","response","json","catch","Boolean","window","location","hostname","match","initialState","tableReducer","action","isShowingModalReducer","rootReducer","combineReducers","columnsReducer","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.47fdb136.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loader.scss\";\n\nconst Loader = () => {\n   return (\n      <div id=\"cube-loader\">\n         <div className=\"caption\">\n            <div className=\"cube-loader\">\n               <div className=\"cube loader-1\"></div>\n               <div className=\"cube loader-2\"></div>\n               <div className=\"cube loader-4\"></div>\n               <div className=\"cube loader-3\"></div>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport \"./Title.scss\";\n\nconst Title = ({ title }) => {\n   return <span className=\"title\">{title}</span>;\n};\n\nexport default Title;\n","import React from \"react\";\n\nconst TextCell = ({value,...props}) => {\n   return(\n      <p>{value}</p>\n   )\n};\n\nexport default TextCell;\n","import TextCell from \"./components/Main/Table/TableBody/TableRow/TableCell/CellRenderer/TextCell\";\nimport PasswordCell from \"./components/Main/Table/TableBody/TableRow/TableCell/CellRenderer/PasswordCell\";\n\nexport const COLUMNS = [\n   { id: 1, name: \"Id\", renderer: TextCell, key: \"id\" },\n   { id: 2, name: \"Name\", renderer: TextCell, key: \"firstName\" },\n   { id: 3, name: \"Last Name\", renderer: TextCell, key: \"lastName\" },\n   { id: 4, name: \"Password\", renderer: PasswordCell, key: \"password\" },\n   { id: 5, name: \"Role\", renderer: TextCell, key: \"role\" },\n   { id: 6, name: \"Birthday\", renderer: TextCell, key: \"bDay\" },\n   { id: 7, name: \"Country\", renderer: TextCell, key: \"country\" },\n   { id: 8, name: \"Phone\", renderer: TextCell, key: \"phone\" },\n   { id: 9, name: \"E-mail\", renderer: TextCell, key: \"email\" },\n];\n\nexport const TABLE_TITLE = 'Users Table'\n\nexport const DEFAULT_COLUMNS_ID = [1, 2, 3, 4];\n","import React from \"react\";\n\nconst PasswordCell = ({ value, ...props }) => {\n   return (\n      <span\n         style={{\n            color: \"rgba(33, 32, 32, 1)\",\n            backgroundColor: \"none\",\n            display: \"block\",\n         }}\n      >\n         {value}\n      </span>\n   );\n};\n\nexport default PasswordCell;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Button.scss\";\n\nconst Button = ({ className, buttonClickHandler, buttonText }) => {\n   const classes = className ? className + \" button\" : \"button\";\n\n   return (\n      <button className={classes} onClick={buttonClickHandler}>\n         {buttonText}\n      </button>\n   );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./AvailableSearch.scss\";\n\nconst AvailableSearch = ({ setSearchableValue }) => {\n   const searchChangeHandler = (value) => {\n      setSearchableValue(value.trim());\n   };\n   return (\n      <input\n         className=\"search-input\"\n         type=\"search\"\n         onChange={(event) => searchChangeHandler(event.target.value)}\n         placeholder=\"Search...\"\n      />\n   );\n};\n\nexport default AvailableSearch;\n","export const ItemTypes = {\n   AVAILABLE: \"available\",\n   SELECTED: \"selected\",\n};\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { ItemTypes } from \"../DnD-types\";\n\nconst AvailableItem = ({ value, columnId }) => {\n   //DnD\n   const [{ isDragging }, dragRef] = useDrag({\n      item: { id: columnId, type: ItemTypes.AVAILABLE },\n      collect: (monitor) => ({\n         isDragging: monitor.isDragging(),\n      }),\n   });\n   const opacity = isDragging ? 0.5 : 1;\n\n   return (\n      <li style={{ opacity }} className=\"columns-list-item\" ref={dragRef}>\n         {value}\n      </li>\n   );\n};\n\nexport default AvailableItem;\n","import React, { useState, useMemo } from \"react\";\nimport AvailableSearch from \"./AvailableSearch\";\nimport AvailableItem from \"../ListItemRenderer/AvailableItem\";\n\nconst AvailableColumns = ({ columns, selectedIds }) => {\n   const availableColumns = useMemo(() => {\n      return columns\n         .filter((column) => !selectedIds.includes(column.id))\n         .sort((a, b) => (a.name > b.name ? 1 : a.name < b.name ? -1 : 0));\n   }, [columns, selectedIds]);\n   const [searchableValue, setSearchableValue] = useState(\"\");\n   const filteredList = availableColumns.filter((item) =>\n      item.name.toLowerCase().includes(searchableValue.toLowerCase().trim())\n   );\n\n   const availableColumnsList = useMemo(() => {\n      return filteredList.map((column) => (\n         <AvailableItem\n            key={column.id}\n            value={column.name}\n            columnId={column.id}\n         />\n      ));\n   }, [filteredList]);\n\n   return (\n      <ul className=\"available-ul\">\n         <AvailableSearch setSearchableValue={setSearchableValue} />\n         {availableColumnsList}\n      </ul>\n   );\n};\n\nexport default AvailableColumns;\n","import React from \"react\";\nimport \"./CrossButton.scss\";\n\nconst CrossButton = ({ buttonClickHandler }) => {\n   return (\n      <div className=\"button-remove\" onClick={buttonClickHandler}>\n         <span className=\"button-remove__element\"></span>\n         <span className=\"button-remove__element\"></span>\n      </div>\n   );\n};\n\nexport default CrossButton;\n","import React from \"react\";\nimport CrossButton from \"../../../../../CrossButton\";\n\nconst SelectedItem = ({ value, columnId, removeSelectedItemClickHandler }) => {\n   return (\n      <li className=\"columns-list-item selected-ul__item\">\n         <span>{value}</span>\n         <CrossButton\n            columnId={columnId}\n            buttonClickHandler={() => removeSelectedItemClickHandler(columnId)}\n         />\n      </li>\n   );\n};\n\nexport default SelectedItem;\n","import React, { useMemo } from \"react\";\nimport SelectedItem from \"../ListItemRenderer/SelectedItem\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"../DnD-types\";\n\nconst SelectedColumns = ({ columns, selectedIds, setSelectedIds }) => {\n   //DnD\n   const [dropProps, dropRef] = useDrop({\n      accept: ItemTypes.AVAILABLE,\n      drop: (item) => {\n         const newSelectedIds = [...selectedIds].concat(item.id);\n         setSelectedIds(newSelectedIds);\n      },\n   });\n\n   const selectedColumns = selectedIds.map((id) =>\n      columns.find((column) => column.id === id)\n   );\n   const removeSelectedItemClickHandler = (columnId) => {\n      const newSelectedIds = selectedIds.filter((id) => id !== columnId);\n      setSelectedIds(newSelectedIds);\n   };\n   const selectedColumnsList = selectedColumns.map((column) => (\n      <SelectedItem\n         key={column.id}\n         columnId={column.id}\n         value={column.name}\n         removeSelectedItemClickHandler={removeSelectedItemClickHandler}\n      />\n   ));\n\n   return (\n      <ul className=\"selected-ul\" ref={dropRef}>\n         {selectedColumnsList}\n      </ul>\n   );\n};\n\nexport default SelectedColumns;\n","import React from \"react\";\nimport Button from \"../../../../../Button\";\nimport { useDispatch } from \"react-redux\";\nimport {\n   closeModal,\n   setSelectedColumnsId,\n} from \"../../../../../../redux/actions\";\n\nconst Apply = ({ selectedIds }) => {\n   const dispatch = useDispatch();\n   return (\n      <Button\n         buttonText=\"Apply\"\n         className=\"apply\"\n         buttonClickHandler={() => {\n            dispatch(setSelectedColumnsId(selectedIds));\n            dispatch(closeModal());\n         }}\n      />\n   );\n};\n\nexport default Apply;\n","import {\n   FETCH_DATA,\n   FETCH_DATA_SUCCESS,\n   FETCH_DATA_FAILED,\n   SHOW_MODAL,\n   CLOSE_MODAL,\n   SET_SELECTED_COLUMNS_ID,\n} from \"./types\";\n\nexport const fetchData = () => {\n   return (dispatch) => {\n      dispatch({ type: FETCH_DATA });\n      return fetch(\"/api/*\", { method: \"GET\" })\n         .then((response) => response.json())\n         .then((json) =>\n            dispatch({ type: FETCH_DATA_SUCCESS, payload: json.data })\n         )\n         .catch(() => dispatch({ type: FETCH_DATA_FAILED }));\n   };\n};\n\nexport const showModal = () => {\n   return {\n      type: SHOW_MODAL,\n   };\n};\n\nexport const closeModal = () => {\n   return {\n      type: CLOSE_MODAL,\n   };\n};\n\nexport const setSelectedColumnsId = (ids) => {\n   return {\n      type: SET_SELECTED_COLUMNS_ID,\n      payload: ids,\n   };\n};\n","export const FETCH_DATA = \"FETCH_DATA\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\nexport const FETCH_DATA_FAILED = \"FETCH_DATA_FAILED\";\nexport const SHOW_MODAL = \"SHOW_MODAL\";\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\nexport const SET_SELECTED_COLUMNS_ID = \"SET_SELECTED_COLUMNS_ID\";\n","import React from \"react\";\nimport \"./ListWrapper.scss\";\n\nconst ListWrapper = (props) => {\n   return <div className=\"list-wrapper\">{props.children}</div>;\n};\n\nexport default ListWrapper;\n","import React from \"react\";\nimport \"./ColumnTitle.scss\";\n\nconst ColumnTitle = ({ title }) => {\n   return <p className=\"column-title\">{title}</p>;\n};\n\nexport default ColumnTitle;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport \"./ColumnsSelection.scss\";\nimport AvailableColumns from \"./AvailableColumns\";\nimport SelectedColumns from \"./SelectedColumns\";\nimport Apply from \"./Apply\";\nimport ListWrapper from \"./ListWrapper\";\nimport ColumnTitle from \"./ColumnTitle\";\nimport { COLUMNS } from \"../../../../../Columns\";\n\n//TODO:TOUCH DND DOESN'T WORK\nconst ColumnsSelection = () => {\n   const selectedColumnsId = useSelector(\n      (state) => state.columns.selectedColumnsId\n   );\n   const [selectedColumnsIdModal, setSelectedColumnsIdModal] = useState(\n      selectedColumnsId\n   );\n   const columns = COLUMNS;\n\n   return (\n      <DndProvider backend={(TouchBackend, HTML5Backend)}>\n         <div className=\"columns-selection\">\n            <div className=\"columns-selection__lists\">\n               <ListWrapper>\n                  <ColumnTitle title=\"Available\" />\n                  <AvailableColumns\n                     columns={columns}\n                     selectedIds={selectedColumnsIdModal}\n                  />\n               </ListWrapper>\n               <hr />\n               <ListWrapper>\n                  <ColumnTitle title=\"Selected\" />\n                  <SelectedColumns\n                     columns={columns}\n                     selectedIds={selectedColumnsIdModal}\n                     setSelectedIds={setSelectedColumnsIdModal}\n                  />\n               </ListWrapper>\n            </div>\n            <Apply selectedIds={selectedColumnsIdModal} />\n         </div>\n      </DndProvider>\n   );\n};\n\nexport default ColumnsSelection;\n","import React from \"react\";\nimport \"./ColumnsSelectionModal.scss\";\nimport ColumnsSelection from \"./ColumnsSelection\";\nimport Title from \"../../Title\";\nimport CrossButton from \"../../../CrossButton\";\nimport { useDispatch } from \"react-redux\";\nimport { closeModal } from \"../../../../redux/actions\";\n\nconst ColumnsSelectionModal = () => {\n   const dispatch = useDispatch();\n\n   return (\n      <div className=\"modal-window\">\n         <Title title=\"Select columns for the grid\" />\n         <CrossButton buttonClickHandler={() => dispatch(closeModal())} />\n         <ColumnsSelection />\n      </div>\n   );\n};\n\nexport default ColumnsSelectionModal;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./Header.scss\";\nimport Title from \"../Title\";\nimport { TABLE_TITLE } from \"../../../Columns\";\nimport Button from \"../../Button\";\nimport ColumnsSelectionModal from \"./ColumnsSelectionModal\";\nimport { showModal } from \"../../../redux/actions\";\n\nconst Header = () => {\n   const title = TABLE_TITLE;\n   const isShowingColumnsSelectionModal = useSelector(\n      (state) => state.columns.isShowColumnsSelection\n   );\n   const dispatch = useDispatch();\n\n   return (\n      <header className=\"main-header\">\n         <Title title={title} />\n         <Button\n            buttonText=\"Select Grid Columns\"\n            buttonClickHandler={() => dispatch(showModal())}\n         />\n         {isShowingColumnsSelectionModal ? <ColumnsSelectionModal /> : null}\n      </header>\n   );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./TableHeader.scss\";\nimport { COLUMNS } from \"../../../../Columns\";\n\nconst TableHeader = () => {\n   const columns = COLUMNS;\n   const selectedIds = useSelector((state) => state.columns.selectedColumnsId);\n   const selectedColumns = selectedIds.map((columnId) =>\n      columns.find((column) => column.id === columnId)\n   );\n   const headers = selectedColumns.map((column) => {\n      return (\n         <th className=\"header-cell\" key={column.id}>\n            {column.name}\n         </th>\n      );\n   });\n\n   return (\n      <thead className=\"table-header\">\n         <tr>{headers}</tr>\n      </thead>\n   );\n};\n\nexport default TableHeader;\n","import React from \"react\";\nimport \"./TableCell.scss\";\n\nconst TableCell = ({ itemData, column }) => {\n   const value = itemData[column.key];\n   const Renderer = column.renderer;\n\n   return (\n      <td className=\"table-row-cell\">\n         <Renderer value={value} />\n      </td>\n   );\n};\n\nexport default TableCell;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./TableRow.scss\";\nimport TableCell from \"./TableCell\";\nimport { COLUMNS } from \"../../../../../Columns\";\n\nconst TableRow = ({ itemData }) => {\n   const columns = COLUMNS;\n   const selectedIds = useSelector((state) => state.columns.selectedColumnsId);\n\n   const selectedColumns = selectedIds.map((columnId) =>\n      columns.find((column) => column.id === columnId)\n   );\n   const rowCells = selectedColumns.map((column) => (\n      <TableCell key={column.id} column={column} itemData={itemData} />\n   ));\n\n   return <tr className=\"table-body-row\">{rowCells}</tr>;\n};\n\nexport default TableRow;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./TableBody.scss\";\nimport TableRow from \"./TableRow\";\n\nconst TableBody = () => {\n   const data = useSelector((state) => state.table.data);\n   const tableRows = data.map((item) => (\n      <TableRow key={item.id} itemData={item} />\n   ));\n   return <tbody className=\"table-body\">{tableRows}</tbody>;\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport \"./Table.scss\";\nimport TableHeader from \"./TableHeader\";\nimport TableBody from \"./TableBody\";\n\nconst Table = () => {\n   return (\n      <table className=\"table\">\n         <TableHeader />\n         <TableBody />\n      </table>\n   );\n};\n\nexport default Table;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Header from \"./Header\";\nimport Table from \"./Table\";\n\nconst Main = () => {\n   const selectedColumnsId = useSelector(\n      (state) => state.columns.selectedColumnsId\n   );\n   return (\n      <React.Fragment>\n         <Header />\n         <main className=\"main\">\n            {selectedColumnsId.length > 0 ? (\n               <Table />\n            ) : (\n               <p style={{ fontSize: \"1.15em\" }}>Please, set the columns to show</p>\n            )}\n         </main>\n      </React.Fragment>\n   );\n};\n\nexport default Main;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./App.scss\";\nimport Loader from \"./components/Loader\";\nimport Main from \"./components/Main\";\nimport { fetchData } from \"./redux/actions\";\n\nfunction App() {\n   const isLoading = useSelector((state) => state.table.loader);\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n      dispatch(fetchData());\n   }, []);\n   \n   return <div className=\"App\">{isLoading ? <Loader /> : <Main />}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n   FETCH_DATA,\n   FETCH_DATA_SUCCESS,\n   FETCH_DATA_FAILED,\n} from \"../types\";\n\nconst initialState = {\n   loader: null,\n   data: [],\n};\nconst tableReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case FETCH_DATA:\n         return { ...state, loader: true };\n      case FETCH_DATA_SUCCESS:\n         return { ...state, data: action.payload, loader: false };\n      case FETCH_DATA_FAILED:\n         return { ...state, data: null, loader: false };\n    \n      default:\n         return state;\n   }\n};\n\nexport default tableReducer;\n","import { SHOW_MODAL, CLOSE_MODAL, SET_SELECTED_COLUMNS_ID } from \"../types\";\nimport { DEFAULT_COLUMNS_ID } from \"../../Columns\";\n\nconst columns = {\n   isShowColumnsSelection: false,\n   selectedColumnsId: DEFAULT_COLUMNS_ID,\n};\n\nconst isShowingModalReducer = (state = columns, action) => {\n   switch (action.type) {\n      case SHOW_MODAL:\n         return { ...state, isShowColumnsSelection: true };\n      case CLOSE_MODAL:\n         return { ...state, isShowColumnsSelection:false };\n      case SET_SELECTED_COLUMNS_ID:\n         return { ...state, selectedColumnsId: [...action.payload] };\n      default:\n         return state;\n   }\n};\n\nexport default isShowingModalReducer;\n","import { combineReducers } from \"redux\";\nimport tableReducer from \"./reducers/tableReducer\";\nimport columnsReducer from \"./reducers/columnsReducer\";\n\nexport const rootReducer = combineReducers({\n   table: tableReducer,\n   columns: columnsReducer,\n});\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { rootReducer } from \"./rootReducer\";\n\nconst store = createStore(\n   rootReducer,\n   compose(\n      applyMiddleware(thunk),\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n         window.__REDUX_DEVTOOLS_EXTENSION__()\n   )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n   <Provider store={store}>\n      <App />\n   </Provider>,\n   document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}