{"version":3,"sources":["components/Loader/index.js","components/Title/index.js","components/Button/index.js","components/ColumnsSelectionModal/ColumnsSelection/AvailableColumns/AvailableSearch/index.js","DnD-types.js","components/ColumnsSelectionModal/ColumnsSelection/ListItemRenderer/AvailableItem.js","components/ColumnsSelectionModal/ColumnsSelection/AvailableColumns/index.js","components/CrossButton/index.js","components/ColumnsSelectionModal/ColumnsSelection/ListItemRenderer/SelectedItem.js","components/ColumnsSelectionModal/ColumnsSelection/SelectedColumns/index.js","components/ColumnsSelectionModal/ColumnsSelection/Apply/index.js","components/ColumnsSelectionModal/ColumnsSelection/index.js","components/ColumnsSelectionModal/index.js","components/Header/index.js","components/Table/TableHeader/index.js","components/Table/TableBody/TableRow/TableCell/index.js","components/Table/TableBody/TableRow/index.js","components/Table/TableBody/index.js","components/Table/index.js","components/Table/TableBody/TableRow/TableCell/CellRenderer/TextCell.js","Columns.js","components/Table/TableBody/TableRow/TableCell/CellRenderer/PasswordCell.js","App.js","serviceWorker.js","index.js"],"names":["Loader","props","id","className","Title","titleText","Button","useState","classes","setClasses","useEffect","class","newClasses","push","join","onClick","buttonClickHandler","buttonText","AvailableSearch","setSearchableValue","type","onChange","event","value","target","trim","length","placeholder","ItemTypes","DragSource","beginDrag","columnId","connect","monitor","connectDragSource","dragSource","isDragging","coords","getClientOffset","selectedId","setSelectedId","opacity","style","ref","AvailableColumns","columns","selectedIds","availableColumns","useMemo","filter","column","includes","sort","a","b","name","searchableValue","filteredList","item","toLowerCase","availableColumnsList","map","key","CrossButton","SelectedItem","setSelectedIds","removeSelectedItemClickHandler","newSelectedId","DropTarget","drop","getItem","onDrop","connectDropTarget","dropTarget","canDrop","isOver","selectedColumnsList","find","Apply","setSelectedColumnsId","setIsShowingColumnsSelectionModal","ColumnsSelection","selectedColumnsId","DndProvider","backend","HTML5Backend","ColumnsSelectionModal","Header","tableTitle","isShowingColumnsSelectionModal","TableHeader","headers","TableCell","itemData","Renderer","renderer","TableRow","rowCells","TableBody","data","dataRows","Table","TextCell","COLUMNS","color","backgroundColor","display","DEFAULT_COLUMNS_ID","App","isLoading","setIsLoading","setData","setTimeout","fetch","method","then","response","ok","json","result","Fragment","ble","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8cd28a4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loader.scss\";\n\nconst Loader = (props) => {\n   return (\n      <div id=\"cube-loader\">\n         <div className=\"caption\">\n            <div className=\"cube-loader\">\n               <div className=\"cube loader-1\"></div>\n               <div className=\"cube loader-2\"></div>\n               <div className=\"cube loader-4\"></div>\n               <div className=\"cube loader-3\"></div>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport \"./Title.scss\";\n\nconst Title = (props) => {\n   return <span className='title'>{props.titleText}</span>;\n};\n\nexport default Title;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Button.scss\";\n\nconst Button = (props) => {\n   const [classes, setClasses] = useState(\"button\");\n\n   useEffect(() => {\n      if (props.class) {\n         const newClasses = [classes];\n         newClasses.push(props.class);\n         setClasses(newClasses.join(\" \"));\n      }\n   }, []);\n\n   return (\n      <button className={classes} onClick={props.buttonClickHandler}>\n         {props.buttonText}\n      </button>\n   );\n};\n\nexport default Button;\n","import React from \"react\";\nimport './AvailableSearch.scss'\n\nconst AvailableSearch = ({ setSearchableValue, ...props }) => {\n   const searchChangeHandler = (value) => {\n      if (!value || value.trim().length === 0) {\n         setSearchableValue('');\n      } else {\n         setSearchableValue(value.trim());\n      }\n   };\n   return (\n      <input\n         className=\"search-input\"\n         type=\"search\"\n         onChange={(event) => searchChangeHandler(event.target.value)}\n         placeholder=\"Search...\"\n      />\n   );\n};\n\nexport default AvailableSearch;\n","export const ItemTypes = {\n   AVAILABLE: 'available',\n }","import React from \"react\";\nimport { DragSource } from \"react-dnd\";\nimport { ItemTypes } from \"../../../../DnD-types\";\n\nconst AvailableItem = ({\n   value,\n   columnId,\n   selectedId,\n   setSelectedId,\n\n   coords,\n   isDragging,\n   connectDragSource,\n   ...props\n}) => {\n   const opacity = isDragging ? 0.5 : 1;\n\n\n   return (\n      <li\n         style={{ opacity: opacity }}\n         className=\"columns-list-item\"\n         ref={connectDragSource}\n      >\n         {value}\n      </li>\n   );\n};\n\nexport default DragSource(\n   ItemTypes.AVAILABLE,\n   {\n      beginDrag: (props) => ({ id: props.columnId }),\n   },\n   (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n      coords: monitor.getClientOffset(),\n   })\n)(AvailableItem);\n","import React, { useState, useMemo } from \"react\";\nimport \"./AvailableColumns.scss\";\nimport AvailableSearch from \"./AvailableSearch\";\nimport AvailableItem from \"../ListItemRenderer/AvailableItem\";\n\nconst AvailableColumns = ({ columns, selectedIds, ...props }) => {\n   const availableColumns = useMemo(() => {\n      return columns\n         .filter((column) => !selectedIds.includes(column.id))\n         .sort((a, b) => (a.name > b.name ? 1 : a.name < b.name ? -1 : 0));\n   }, [columns, selectedIds]);\n\n   const [searchableValue, setSearchableValue] = useState(\"\");\n\n   const filteredList = useMemo(() => {\n      return availableColumns.filter((item) =>\n         item.name.toLowerCase().includes(searchableValue.toLowerCase().trim())\n      );\n   }, [availableColumns, searchableValue]);\n\n   const availableColumnsList = useMemo(() => {\n      return filteredList.map((column) => (\n         <AvailableItem\n            key={column.id}\n            value={column.name}\n            columnId={column.id}\n            {...props}\n         />\n      ));\n   }, [filteredList]);\n   return (\n      <ul className=\"available\">\n         <AvailableSearch setSearchableValue={setSearchableValue} />\n         {availableColumnsList}\n      </ul>\n   );\n};\n\nexport default AvailableColumns;\n","import React from \"react\";\nimport \"./CrossButton.scss\";\n\nconst CrossButton = ({ buttonClickHandler, ...props }) => {\n   return (\n      <div className=\"button-remove\" onClick={buttonClickHandler}>\n         <span className=\"button-remove__element\"></span>\n         <span className=\"button-remove__element\"></span>\n      </div>\n   );\n};\n\nexport default CrossButton;\n","import React from \"react\";\nimport CrossButton from \"../../../CrossButton\";\n\nconst SelectedItem = ({\n   value,\n   columnId,\n   selectedIds,\n   setSelectedIds,\n   ...props\n}) => {\n   const removeSelectedItemClickHandler = () => {\n      let newSelectedId = [...selectedIds];\n      setSelectedIds(newSelectedId.filter((id) => id !== columnId));\n   };\n\n   return (\n      <li className=\"columns-list-item selected-list-item\">\n         <span>{value}</span>\n         <CrossButton\n            columnId={columnId}\n            onClick={removeSelectedItemClickHandler}\n            buttonClickHandler={removeSelectedItemClickHandler}\n         />\n      </li>\n   );\n};\n\nexport default SelectedItem;\n","import React, { useMemo } from \"react\";\nimport \"./SelectedColumns.scss\";\nimport SelectedItem from \"../ListItemRenderer/SelectedItem\";\nimport { DropTarget } from \"react-dnd\";\nimport { ItemTypes } from \"../../../../DnD-types\";\n\nconst SelectedColumns = ({\n   canDrop,\n   isOver,\n   connectDropTarget,\n   onDrop,\n\n   columns,\n   selectedIds,\n   setSelectedIds,\n   ...props\n}) => {\n   const selectedColumns = useMemo(() => {\n      return selectedIds.map((id) =>\n         columns.find((column) => column.id === id)\n      );\n   }, [columns, selectedIds]);\n\n   const selectedColumnsList = selectedColumns.map((column) => (\n      <SelectedItem\n         key={column.id}\n         value={column.name}\n         columnId={column.id}\n         selectedIds={selectedIds}\n         setSelectedIds={setSelectedIds}\n      />\n   ));\n\n   return (\n      <ul className=\"selected\" ref={connectDropTarget}>\n         {selectedColumnsList}\n      </ul>\n   );\n};\n\nexport default DropTarget(\n   ItemTypes.AVAILABLE,\n   {\n      drop: (props, monitor) => {\n         const item = monitor.getItem();\n         props.onDrop(item.id);\n      },\n   },\n   (connect, monitor) => ({\n      connectDropTarget: connect.dropTarget(),\n   })\n)(SelectedColumns);\n","import React from \"react\";\nimport Button from \"../../../Button\";\n\nconst Apply = (props) => {\n   const ApplyButtonClickHandler = () => {\n      props.setSelectedColumnsId(props.selectedIds);\n      props.setIsShowingColumnsSelectionModal(false);\n   };\n   return (\n      <Button\n         buttonText=\"Apply\"\n         class=\"apply\"\n         buttonClickHandler={ApplyButtonClickHandler}\n      />\n   );\n};\n\nexport default Apply;\n","import React, { useState } from \"react\";\nimport \"./ColumnsSelection.scss\";\nimport AvailableColumns from \"./AvailableColumns\";\nimport SelectedColumns from \"./SelectedColumns\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport Apply from \"./Apply\";\n\nconst ColumnsSelection = ({\n   columns,\n   selectedColumnsId,\n   setSelectedColumnsId,\n   setIsShowingColumnsSelectionModal,\n   ...props\n}) => {\n   const [selectedIds, setSelectedIds] = useState(selectedColumnsId);\n\n   const onDrop = (columnId) => {\n      let newSelectedId = [...selectedIds];\n      newSelectedId.push(columnId);\n      setSelectedIds(newSelectedId);\n   };\n\n   return (\n      <DndProvider backend={HTML5Backend}>\n         <div className=\"columns-selection\">\n            <div className=\"list-wrapper\">\n               <AvailableColumns\n                  columns={columns}\n                  selectedIds={selectedIds}\n                  setSelectedIds={setSelectedIds}\n               />\n               <hr />\n               <SelectedColumns\n                  columns={columns}\n                  selectedIds={selectedIds}\n                  setSelectedIds={setSelectedIds}\n                  onDrop={onDrop}\n               />\n            </div>\n            <Apply\n               selectedIds={selectedIds}\n               setSelectedColumnsId={setSelectedColumnsId}\n               setIsShowingColumnsSelectionModal={\n                  setIsShowingColumnsSelectionModal\n               }\n            />\n         </div>\n      </DndProvider>\n   );\n};\n\nexport default ColumnsSelection;\n","import React from \"react\";\nimport \"./ColumnsSelectionModal.scss\";\nimport ColumnsSelection from \"./ColumnsSelection\";\nimport Title from \"../Title\";\nimport CrossButton from \"../CrossButton\";\n\nconst ColumnsSelectionModal = ({\n   columns,\n   selectedColumnsId,\n   setSelectedColumnsId,\n   setIsShowingColumnsSelectionModal,\n   ...props\n}) => {\n   return (\n      <div className=\"modal-window\">\n         <Title titleText=\"Select columns for the grid\" />\n         <CrossButton\n            buttonClickHandler={() => setIsShowingColumnsSelectionModal(false)}\n         />\n         <ColumnsSelection\n            columns={columns}\n            selectedColumnsId={selectedColumnsId}\n            setSelectedColumnsId={setSelectedColumnsId}\n            setIsShowingColumnsSelectionModal={\n               setIsShowingColumnsSelectionModal\n            }\n         />\n      </div>\n   );\n};\n\nexport default ColumnsSelectionModal;\n","import React, { useState } from \"react\";\nimport \"./Header.scss\";\nimport Title from \"../Title\";\nimport Button from \"../Button\";\nimport ColumnsSelectionModal from \"../ColumnsSelectionModal\";\n\nconst Header = ({ tableTitle, columns, ...props }) => {\n   const [isShowingColumnsSelectionModal, setIsShowingColumnsSelectionModal] = useState(false);\n   const buttonClickHandler = () => {\n      setIsShowingColumnsSelectionModal(true);\n   };\n\n   return (\n      <header className=\"main-header\">\n         <Title titleText={tableTitle} />\n         <Button\n            buttonText=\"Select Grid Columns\"\n            buttonClickHandler={buttonClickHandler}\n         />\n         {isShowingColumnsSelectionModal ? (\n            <ColumnsSelectionModal\n               columns={columns}\n               setIsShowingColumnsSelectionModal={setIsShowingColumnsSelectionModal}\n               {...props}\n            />\n         ) : null}\n      </header>\n   );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./TableHeader.scss\";\n\nconst TableHeader = ({ columns, ...props }) => {\n   const headers = columns.map((column) => {\n      return (\n         <th className=\"header-cell\" key={column.id}>\n            {column.name}\n         </th>\n      );\n   });\n\n   return (\n      <thead className=\"table-header\">\n         <tr>{headers}</tr>\n      </thead>\n   );\n};\n\nexport default TableHeader;\n","import React from \"react\";\nimport \"./TableCell.scss\";\n\nconst TableCell = ({ itemData, column, ...props }) => {\n   const value = itemData[column.key];\n   const Renderer = column.renderer;\n\n   return (\n      <td className=\"table-row-cell\">\n         <Renderer value={value} />\n      </td>\n   );\n};\n\nexport default TableCell;\n","import React from \"react\";\nimport \"./TableRow.scss\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ itemData, columns, ...props }) => {\n   const rowCells = columns.map((column) => (\n      <TableCell key={column.id} column={column} itemData={itemData} />\n   ));\n\n   return <tr className={props.className}>{rowCells}</tr>;\n};\n\nexport default TableRow;\n","import React from \"react\";\nimport \"./TableBody.scss\";\nimport TableRow from \"./TableRow\";\n\nconst TableBody = ({ data, columns, ...props }) => {\n   const dataRows = data.map((item) => (\n      <TableRow\n         className=\"table-body-row\"\n         key={item.id}\n         itemData={item}\n         columns={columns}\n      />\n   ));\n   return <tbody className=\"table-body\">{dataRows}</tbody>;\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport \"./Table.scss\";\nimport TableHeader from \"./TableHeader\";\nimport TableBody from \"./TableBody\";\n\nconst Table = ({ columns, data, ...props }) => {\n   return (\n      <table className=\"table\">\n         <TableHeader columns={columns} />\n         <TableBody columns={columns} data={data} />\n      </table>\n   );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst TextCell = ({value,...props}) => {\n   return(\n      <p>{value}</p>\n   )\n};\n\nexport default TextCell;\n","import TextCell from \"./components/Table/TableBody/TableRow/TableCell/CellRenderer/TextCell\";\nimport PasswordCell from \"./components/Table/TableBody/TableRow/TableCell/CellRenderer/PasswordCell\";\n\nexport const COLUMNS = [\n   { id: 1, name: \"Id\", renderer: TextCell, key: \"id\" },\n   { id: 2, name: \"Name\", renderer: TextCell, key: \"firstName\" },\n   { id: 3, name: \"Last Name\", renderer: TextCell, key: \"lastName\" },\n   { id: 4, name: \"Password\", renderer: PasswordCell, key: \"password\" },\n   { id: 5, name: \"Role\", renderer: TextCell, key: \"role\" },\n   { id: 6, name: \"Birthday\", renderer: TextCell, key: \"bDay\" },\n   { id: 7, name: \"Country\", renderer: TextCell, key: \"country\" },\n   { id: 8, name: \"Phone\", renderer: TextCell, key: \"phone\" },\n   { id: 9, name: \"E-mail\", renderer: TextCell, key: \"email\" },\n];\n\nexport const TABLE_TITLE = 'Users Table'\n\nexport const DEFAULT_COLUMNS_ID = [1, 2, 3, 4];\n","import React from \"react\";\n\nconst PasswordCell = ({ value, ...props }) => {\n   // let hiddenPassword = value.replace(/./g, \"*\");\n\n   return (\n      <span\n         style={{\n            color: \"rgba(33, 32, 32, 1)\",\n            backgroundColor: \"none\",\n            display: \"block\",\n         }}\n      >\n         {value}\n      </span>\n   );\n};\n\nexport default PasswordCell;\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./App.scss\";\nimport Loader from './components/Loader'\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\nimport { COLUMNS, DEFAULT_COLUMNS_ID, TABLE_TITLE } from \"./Columns\";\n\nfunction App() {\n   const [isLoading, setIsLoading] = useState(true);\n   const [data, setData] = useState([]);\n   const tableTitle = TABLE_TITLE;\n   const [selectedColumnsId, setSelectedColumnsId] = useState(\n      DEFAULT_COLUMNS_ID\n   );\n   const columns = useMemo(() => {\n      return selectedColumnsId.map((columnId) =>\n         COLUMNS.find((column) => column.id === columnId)\n      );\n   }, [selectedColumnsId]);\n\n   useEffect(() => {\n      setTimeout(() => {\n         fetch(\"api/*\", {\n            method: \"GET\",\n         })\n            .then((response) => {\n               if (response.ok) {\n                  return response.json();\n               }\n            })\n            .then((result) => {\n               setData(result.data);\n               setIsLoading(false);\n            });\n      }, 2000);\n   }, []);\n\n   return (\n      <div className=\"App\">\n         {isLoading ? (\n           <Loader />\n         ) : (\n            <React.Fragment>\n               <Header\n                  tableTitle={tableTitle}\n                  columns={COLUMNS}\n                  selectedColumnsId={selectedColumnsId}\n                  setSelectedColumnsId={setSelectedColumnsId}\n               />\n               <main className=\"main\">\n                  {selectedColumnsId.length > 0 ? (\n                     <Table ble columns={columns} data={data} />\n                  ) : (\n                     <div>Please, set the columns to showing</div>\n                  )}\n               </main>\n            </React.Fragment>\n         )}\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}